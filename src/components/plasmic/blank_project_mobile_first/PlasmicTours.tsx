// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9eiWo8Eadwtw46zacr9r4i
// Component: aTev8hzWiX
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PanoGallery from "../../PanoGallery"; // plasmic-import: Bn93SDaxd4/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: 9eiWo8Eadwtw46zacr9r4i/projectcss
import * as sty from "./PlasmicTours.module.css"; // plasmic-import: aTev8hzWiX/css

export type PlasmicTours__VariantMembers = {};

export type PlasmicTours__VariantsArgs = {};
type VariantPropType = keyof PlasmicTours__VariantsArgs;
export const PlasmicTours__VariantProps = new Array<VariantPropType>();

export type PlasmicTours__ArgsType = {};
type ArgPropType = keyof PlasmicTours__ArgsType;
export const PlasmicTours__ArgProps = new Array<ArgPropType>();

export type PlasmicTours__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  panoGallery?: p.Flex<typeof PanoGallery>;
};

export interface DefaultToursProps {
  className?: string;
}

function PlasmicTours__RenderFunc(props: {
  variants: PlasmicTours__VariantsArgs;
  args: PlasmicTours__ArgsType;
  overrides: PlasmicTours__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(defaultcss.h1, defaultcss.__wab_text, sty.h1)}
          >
            {"Tours"}
          </h1>

          <PanoGallery
            data-plasmic-name={"panoGallery"}
            data-plasmic-override={overrides.panoGallery}
            className={classNames("__wab_instance", sty.panoGallery)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "panoGallery"],
  h1: ["h1"],
  panoGallery: ["panoGallery"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  panoGallery: typeof PanoGallery;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTours__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicTours__VariantsArgs;
  args?: PlasmicTours__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicTours__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicTours__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTours__ArgProps,
      internalVariantPropNames: PlasmicTours__VariantProps
    });

    return PlasmicTours__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTours";
  } else {
    func.displayName = `PlasmicTours.${nodeName}`;
  }
  return func;
}

export const PlasmicTours = Object.assign(
  // Top-level PlasmicTours renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    panoGallery: makeNodeComponent("panoGallery"),

    // Metadata about props expected for PlasmicTours
    internalVariantProps: PlasmicTours__VariantProps,
    internalArgProps: PlasmicTours__ArgProps
  }
);

export default PlasmicTours;
/* prettier-ignore-end */
